name: Deployment
concurrency:
  group: production
  cancel-in-progress: true
run-name: Deployment - ${{ github.actor }}
on: 
  push:
    tags:
      - 'v*'
jobs:
  test-code:
    runs-on: ubuntu-22.04
    environment: production 
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: yarn
      - name: Update-yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate
          yarn set version 3.6.1
      - name: Restore yarn
        id: cache-restore-node-yarn
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: 'false'
          path: ~/.yarn
          key: ${{ runner.os }}-iot-server-yarn--
      - name: Yarn install 
        run: yarn install --immutable
      - name: Store yarn
        uses: actions/cache@v3
        id: cache-node-yarn
        with:
          path: ~/.yarn
          key: ${{ runner.os }}-iot-server-yarn--${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-iot-server-yarn--
      - name: Change Test DB HOST
        run: echo DB_HOST='${{ secrets.DBIP }}' >> .development.env
      - name: Start Test
        run: | 
          yarn test
          yarn test:e2e

  deploy:
    needs: test-code
    runs-on: ubuntu-22.04
    environment: production
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: yarn
      - name: Update-yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate
          yarn set version 3.6.1
      - name: Restore yarn
        id: cache-restore-node-yarn
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: 'false'
          path: ~/.yarn
          key: ${{ runner.os }}-iot-server-yarn--
      - name: Build
        run: |
          yarn install
          yarn build
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          sudo chmod 600  ~/.ssh/id_ed25519
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        shell: bash
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
      - name: Deploy
        run: |
          bash auto-deploy.sh
          echo "Deploy completed"
